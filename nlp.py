# -*- coding: utf-8 -*-
"""NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18J8y-SO7ooHQpWCiSdpY0NDDQA_du-vQ
"""

import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords

stop_words = set(stopwords.words('english'))
print(stop_words)

import pandas as pd
import numpy as np
import re
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')
from textblob import TextBlob
import nltk
from nltk.tokenize import word_tokenize
nltk.download('punkt')
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))
from wordcloud import WordCloud
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report, confusion_matrix, completeness_score
import warnings
warnings.filterwarnings('ignore')

dt = pd.read_csv(r"/content/drive/MyDrive/vaccination_all_tweets.csv")
print(dt.head(10))

print(dt.isna().sum())
print(dt.columns)

def data_preprocessing(text):
    text = text.lower()
    text = re.sub(r"https\S+|www\S+https\S+",'',text,flags=re.MULTILINE)
    text = re.sub(r"\@w+|\#",'',text)
    text = re.sub(r"[^\w\s]",'',text)
    text_tokens = word_tokenize(text)
    filtered_text = [w for w in text_tokens if not w in stop_words]
    return ' '.join(filtered_text)
dt["text"] = dt['text'].apply(data_preprocessing)
text_dt = dt.drop_duplicates('text')

text_dt = dt.drop(['id', 'user_name', 'user_location', 'user_description', 'user_created',
       'user_followers', 'user_friends', 'user_favourites', 'user_verified',
       'date', 'hashtags', 'source', 'retweets', 'favorites',
       'is_retweet'],axis=1)
print(text_dt.head(5))

stemmer = PorterStemmer()
def stemming(data):
    text = [stemmer.stem(word) for word in data]
    return data
text_dt['text'] = text_dt['text'].apply(stemming)
print(text_dt.head())

def polarity(text):
    return TextBlob(text).sentiment.polarity
text_dt['polarity'] = text_dt['text'].apply(polarity)
print(text_dt.head())

def sentiment(label):
    if label<0:
        return "NEGATIVE"
    elif label==0:
        return "NEUTRAL"
    elif label>0:
        return "POSITIVE"

text_dt['sentiment'] = text_dt['polarity'].apply(sentiment)
print(text_dt.head())

pos_tweets = text_dt[text_dt['sentiment']=='POSITIVE']
pos_tweets = pos_tweets.sort_values(['polarity'],ascending=False)
text = ' '.join([word for word in pos_tweets['text']])
plt.figure(figsize=(20,15), facecolor="None")
wordcloud = WordCloud(max_words=500,width=1600,height=800).generate(text)
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.title('Most frequent words in Positive tweets',fontsize=19)
plt.show()

neg_tweets = text_dt[text_dt['sentiment']=='NEGATIVE']
neg_tweets = neg_tweets.sort_values(['polarity'],ascending=False)
text = ' '.join([word for word in neg_tweets['text']])
plt.figure(figsize=(20,15), facecolor="None")
wordcloud = WordCloud(max_words=500,width=1600,height=800).generate(text)
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.title('Most frequent words in Negative tweets',fontsize=19)
plt.show()

neu_tweets = text_dt[text_dt['sentiment']=='NEUTRAL']
neu_tweets = neu_tweets.sort_values(['polarity'],ascending=False)
text = ' '.join([word for word in neu_tweets['text']])
plt.figure(figsize=(20,15), facecolor="None")
wordcloud = WordCloud(max_words=500,width=1600,height=800).generate(text)
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.title('Most frequent words in Neutral tweets',fontsize=19)
plt.show()

vect = CountVectorizer(ngram_range=(1,2)).fit(text_dt['text'])

x = text_dt["text"]
y = text_dt["sentiment"]
x = vect.transform(x)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

l_reg = LogisticRegression()
l_reg.fit(x_train,y_train)

y_pred = l_reg.predict(x_test)

accr = accuracy_score(y_pred,y_test)
print("Accuracy is: ",accr*100)

cm = confusion_matrix(y_test,y_pred)

sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

cr = classification_report(y_pred,y_test)
print("Classification Report is: \n",cr)

text = input("Enter your Review: ")
text_pp = data_preprocessing(text)
text_stem = stemming(text_pp)
pol_text = polarity(text_stem)
resultant_sentiment = sentiment(pol_text)
print("REVIEW ENTERED: \n",text)
print("Sentiment is: ",resultant_sentiment)

text = input("Enter your Review: ")
text_pp = data_preprocessing(text)
text_stem = stemming(text_pp)
pol_text = polarity(text_stem)
resultant_sentiment = sentiment(pol_text)
print("REVIEW ENTERED: \n",text)
print("Sentiment is: ",resultant_sentiment)

